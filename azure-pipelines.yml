# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Gradle@3
  displayName: build
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build jacocoTestReport' 
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    #sqGradlePluginVersionChoice: 'build'
    spotBugsAnalysis: false
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
        **/build/libs/*.jar
        **/build/**/*.xml
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: appJar
    publishLocation: 'Container'
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'appJar'
    downloadPath: '$(Pipeline.Workspace)'
  displayName: Descarga Jar
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Sonarcloud'
    organization: 'devops-test-v2-cfajardo'
    projectKey: 'DevOps-Foundation-v2_microservicio-spring'
    projectName: 'microservicio-spring'
    extraProperties: |
      sonar.coverage.jacoco.xmlReportPaths=$(Pipeline.Workspace)/appJar/build/reports/jacoco/test/jacocoTestReport.xml
  displayName: 'Preparing Sonarqube Environment'

- task: Docker@2
    displayName: Docker login
    inputs:
      containerRegistry: 'Docker'
      command: 'login'

- task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      repository: 'cristobalfajardo/devops-cristobal'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'